REMEMBER TO FIX THE INCLUDE ON GET NEXT LINE BONUS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
Y cambiar RO a ssize_t en append

A1K3vpswor
A2K3vpsrot

----- SUDO INSTALL Y CONFIG -----

su
apt-get install sudo
add user to sudo group on etc/group !!
move to root to configurate sudo (To use visudo as root as the conf file advices)
go to sudoers.d and create config file!!
usar visudo ruta/config

Source:sudo.ws sudoers manual.
Defaults	passwd_tries=3
Defaults	log_input
Defaults	log_output
Defaults	iolog_dir="var/log/sudo"
Defaults	requiretty
Defaults	secure_path=""
Defaults	badpass_message=""

----- Password policy -----

Expiration date / login.defs PASS_MAX_DAYS
Dias minimos antes de cambiar / login.defs MIN_PASS_DAYS
Mensaje de aviso (Dias de antelacion) /loding.defs MIN_WARNG_AGE

Instalar pwquality (Cracklib no puede evitar tres caracteres consecutivos) (Mentira, se puede hacer con difok) (De todas formas apt ni aptitude encuentran cracklib)

minlen (En login.defs se puede, obesoleto) / pam minlen
Al menos una mayuscula / pam ucredit
Al menos un numero / pam dcredit
No tres veces consecutivas un caracter / pam maxrepeat 
No username / pam reject_username
(No para Root): 7 caracteres que no sean de la antigua contrase침a
 / pam difok
Importantes para que no sumen longitud de m치s a la contrase침a
lcredit = 0 
ocredit = 0 

Cambiar contrase침a de Root y Kseligma
----- Grupos -----

Agregar usuario principal a sudoers
Crear grupo de 42 y agregar usuario

---- SSH INSTALL ----
Use OpenSSH
apt install openssh-server
/etc/ssh/sshd_config --> port 4242 --> PermitRootLogin no
restart

---- UFW -----
apt install ufw
sudo ufw enable
sudo ufw default deny incoming
sudo ufw default allow outgoing
sudo ufw ssh ? Si veo que no funciona ssh, lo uso (Sigue funcionando)
sudo ufw status verbose - Solo si quiero ver que anda
sudo ufw allow 4242

---- Script ----
#!bin/bash

#Kernel version
#kver=$(uname -r | cut -d'-' -f 1)

#Architecture
#arch=$(arch)

#Architecture (Subject)
arch=$(uname -a)

#Phys CPU
pcpu=$(grep -c processor /proc/cpuinfo)

#Virt CPU
vcpu=$(grep -c "core id" /proc/cpuinfo)

#Perc. of Memory Used
tomem=$(free --mega | grep "Mem" | tr -s ' ' | cut -d' ' -f 2)
umem=$(free --mega | grep "Mem" | tr -s ' ' | cut -d' ' -f 3)
pmemus=$(echo "$tomem $umem" | awk '{printf "%.2f",  $2/$1 * 100}')

#Total Disk Space (Server's LVM Group)
td=$(df -m | grep "/dev/mapper" | awk '{sum+=$2} END{print sum}')
tdgb=$(echo "$td" | awk '{printf "%.fGb", $1/1024}')

#Used Disk Space (Server's LVM Group)
ud=$(df -m | grep "/dev/mapper" | awk '{sum+=$3} END{print sum}')

#Perc. of Disk Usage
pdiskus=$(echo "$td $ud"| awk '{printf "%.f", $2/$1 * 100}')

#Perc. of Cpu Usage
cpusa=$(top -b -n 1 | grep -e '^ *[0-9]' | awk '{sum+=$9} END{printf "%.1f%%", sum}')

#Last Boot Date
lbd=$(who -b | awk '{printf "%s %s", $3, $4}')

#LVM Usage yes/no
lvms=$(lsblk | grep "lvm" | wc -l)

if [ $lvms -gt 0 ] ;
then
lvmsb="yes"
else
lvmsb="no"
fi

#Established TPC Connections
etcp=$(ss | grep -c -e"^tcp")

#Connected users (Sessions)
#usct=$(who | wc -l)

#Connected users (Users)
usct=$(users | tr -s " " "\n" | sort -u | wc -l)

#MAC
mac=$(ip address | grep "link/ether" | awk '{print $2}')

#IPv4 (Would show all, except localhost)
ipv4=$(ip address | grep "inet " | tail -n +2 | awk '{print $2}' | cut -d'/' -f 1)

#Sudo Ejecutions
sudo=$(journalctl _COMM=sudo | grep -c "COMMAND")

#Wall
wall  " #Architecture: $arch
        #CPU physical: $pcpu
        #vCPU: $vcpu
        #Memory Usage: $umem/${tomem}MB ($pmemus%)
        #Disk Usage: $ud/$tdgb ($pdiskus%)
        #CPU load: $cpusa
        #Last boot: $lbd
        #LVM use: $lvmsb
        #TCP Connections: $etcp ESTABLISHED
        #User log: $usct
        #Network: IP $ipv4 ($mac)
        #Sudo: $sudo cmd"

--- Cron ----

sudo chown monitoring.sh root 
sudo chmod u+x monitoring.sh
Como Root crontab -e
*/10 * * * * bash /home/b2brus/monitoring.sh

---- lighttpd ----

sudo apt-get install lighttpd
sudo ufw allow 80 (Lighttpd standard)
sudo systemclt start lighttpd
sudo systemctl enable lighttpd
sudo lighttpd-enable-mod fastcgi fastcgi-php (After installing php-cgi)
sudo service lighttpd force-reload
on /var/www/html we will have our web files!!!


---- MariaBD ----

sudo apt-get install mariadb-server
CREATE DATABASE wp42;
CREATE USER b2brus@localhost IDENTIFIED BY 'b2brus';
GRANT ALL PRIVILEGES ON wp42.* TO 'b2brus'@'localhost';
FLUSH PRIVILEGES;

---- PHP ----

install php-cgi
install php-mysql

---- WordPress ----

sudo apt-get install
/// Dont use this, it installs too many stuff.
/// Instead, get wget and unzip into /vat/www/html
get wget y unzip
wget https://wordpress.org/latest.zip
unzip latest.zip -d /var/www/html
remove wget y unzip
cp wp-config-sample.php wp-config.php
on wp-config.php put database info

---- Servicio Extra ----
Caddy, why not.
sudo apt install caddy
sudo nano /etc/caddy/Caddyfile - Conf file
Puerto: 8080, site directory, /var/www/chtml,
write something inside (index.html)
Restart, enable and start!!! 

LISTO!!!
